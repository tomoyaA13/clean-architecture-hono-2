import { Hono } from 'hono';
import { cors } from 'hono/cors';
import { logger } from 'hono/logger';
import { compress } from 'hono/compress';
import { secureHeaders } from 'hono/secure-headers';
import { timing } from 'hono/timing';
import { AppContext } from './types/app-context';
import { EnvConfig } from './common/env-config';
import { adminInvitationsRouter } from './adapter/in/web/routes/admin-invitations';
import { errorHandler } from './adapter/in/web/middleware/error-handler';
import { prismaMiddleware } from './adapter/in/web/middleware/prisma-middleware';

// Hono„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅÆ‰ΩúÊàê
const app = new Hono<AppContext>();

// „Ç∞„É≠„Éº„Éê„É´„Éü„Éâ„É´„Ç¶„Çß„Ç¢
app.use('*', logger());
app.use('*', timing());
app.use('*', compress());
app.use('*', secureHeaders());

// CORSË®≠ÂÆöÔºàÁí∞Â¢É„Å´Âøú„Åò„Å¶Ë™øÊï¥Ôºâ
app.use('*', async (c, next) => {
  const envConfig = new EnvConfig(c.env);
  const config = envConfig.config;

  const corsMiddleware = cors({
    origin: config.env.isProduction ? [config.email.frontEndUrl] : '*',
    credentials: true,
    allowMethods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    allowHeaders: ['Content-Type', 'Authorization'],
  });

  return corsMiddleware(c, next);
});

// Áí∞Â¢ÉÂ§âÊï∞Ê§úË®º„Å®Ë®≠ÂÆö„ÅÆ„Éü„Éâ„É´„Ç¶„Çß„Ç¢
app.use('*', async (c, next) => {
  try {
    // Áí∞Â¢ÉÂ§âÊï∞„ÇíÊ§úË®º„Åó„Å¶Variables„Å´Ê†ºÁ¥ç
    const envConfig = new EnvConfig(c.env);
    c.set('envConfig', envConfig);

    // ÈñãÁô∫Áí∞Â¢É„Åß„ÅØÁí∞Â¢ÉË®≠ÂÆö„Çí„É≠„Ç∞Âá∫Âäõ
    if (envConfig.config.env.isDevelopment) {
      console.log('üîß Áí∞Â¢ÉË®≠ÂÆö„ÅåÊ≠£Â∏∏„Å´Ë™≠„ÅøËæº„Åæ„Çå„Åæ„Åó„Åü');
    }
  } catch (error) {
    console.error('Áí∞Â¢ÉÂ§âÊï∞„ÅÆÊ§úË®º„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:', error);
    return c.json(
      {
        error: {
          message: 'Internal Server Error',
          code: 'ENV_CONFIG_ERROR',
        },
      },
      500,
    );
  }

  await next();
});

// Prisma „Éü„Éâ„É´„Ç¶„Çß„Ç¢ÔºàAPI „É´„Éº„Éà„ÅÆ„ÅøÔºâ
// Ê≥®ÊÑè: envConfig „Éü„Éâ„É´„Ç¶„Çß„Ç¢„ÅÆÂæå„Å´ÈÅ©Áî®„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çã
app.use('/api/*', prismaMiddleware);

// „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„Éü„Éâ„É´„Ç¶„Çß„Ç¢
app.onError(errorHandler);

// „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà
app.get('/health', (c) => {
  const envConfig = c.get('envConfig');
  return c.json({
    status: 'healthy',
    environment: envConfig.config.env.nodeEnv,
    timestamp: new Date().toISOString(),
  });
});

// API„É´„Éº„ÉÜ„Ç£„É≥„Ç∞
app.route('/api/admin-invitations', adminInvitationsRouter);

// 404„Éè„É≥„Éâ„É©„Éº
app.notFound((c) => {
  return c.json(
    {
      error: {
        message: 'Not Found',
        code: 'NOT_FOUND',
        path: c.req.path,
      },
    },
    404,
  );
});

// Cloudflare Workers„ÅÆ„Ç®„ÇØ„Çπ„Éù„Éº„Éà
export default app;
